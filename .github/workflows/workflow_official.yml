name: Daily BotAPI Build
permissions: write-all
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout empty repo
      uses: actions/checkout@v4

    - name: Clone source code
      run: git clone --recursive https://github.com/tdlib/telegram-bot-api

    - name: Setup build environment
      shell: pwsh
      working-directory: ./telegram-bot-api
      run: |
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg
        ./bootstrap-vcpkg.bat -disableMetrics
        $vcpkgRoot = Resolve-Path .
        echo "VCPKG_ROOT=$vcpkgRoot" >> $env:GITHUB_ENV
        ./vcpkg integrate install
        ./vcpkg install --triplet x64-windows gperf openssl zlib
      
        $gperfPath = Join-Path $vcpkgRoot "installed\x64-windows\tools\gperf"
        echo "$gperfPath" >> $env:GITHUB_PATH

    - name: Configure CMake
      shell: pwsh
      working-directory: ./telegram-bot-api
      run: |
        Remove-Item -Path build -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -Path build -ItemType Directory
        
        cmake -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_INSTALL_PREFIX=../install `
          -DGPERF_EXECUTABLE="$env:VCPKG_ROOT/installed/x64-windows/tools/gperf/gperf.exe" `
          -DZLIB_ROOT="$env:VCPKG_ROOT/installed/x64-windows" `
          -B build `
          -S .

    - name: Build project
      shell: pwsh
      working-directory: ./telegram-bot-api/build
      run: cmake --build . --config Release --target install -- /m

    - name: Verify binaries
      shell: pwsh
      run: Get-ChildItem -Recurse telegram-bot-api

    - name: Create release package
      id: package-artifacts
      shell: pwsh
      run: |
        $date = Get-Date -Format "yyyyMMdd"
        $binDir = ".\telegram-bot-api\build\Release"
        $zipName = "botapi-$date.zip"
        Compress-Archive -Path "$binDir/*" -DestinationPath $zipName
        echo "zip_path=$zipName" >> $env:GITHUB_OUTPUT

    - name: Create Git tag
      id: create-tag
      shell: pwsh
      run: |
        $date = Get-Date -Format "yyyyMMdd"
        $tagName = "nightly-official-$date"
        git tag $tagName
        echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT

    - name: Upload release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create-tag.outputs.tag_name }}
        name: Nightly Build ${{ steps.create-tag.outputs.tag_name }} (Official Version)
        files: ${{ steps.package-artifacts.outputs.zip_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
